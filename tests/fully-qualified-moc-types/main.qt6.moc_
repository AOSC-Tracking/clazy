/****************************************************************************
** Meta object code from reading C++ file 'main.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.7.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'main.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.7.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSNonNamespacedGadgetENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSNonNamespacedGadgetENDCLASS = QtMocHelpers::stringData(
    "NonNamespacedGadget"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSNonNamespacedGadgetENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       4,       // flags
       0,       // signalCount

       0        // eod
};

Q_CONSTINIT const QMetaObject NonNamespacedGadget::staticMetaObject = { {
    nullptr,
    qt_meta_stringdata_CLASSNonNamespacedGadgetENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSNonNamespacedGadgetENDCLASS,
    nullptr,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSNonNamespacedGadgetENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<NonNamespacedGadget, std::true_type>
    >,
    nullptr
} };

namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSNSSCOPENamespacedGadgetENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSNSSCOPENamespacedGadgetENDCLASS = QtMocHelpers::stringData(
    "NS::NamespacedGadget"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSNSSCOPENamespacedGadgetENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       4,       // flags
       0,       // signalCount

       0        // eod
};

Q_CONSTINIT const QMetaObject NS::NamespacedGadget::staticMetaObject = { {
    nullptr,
    qt_meta_stringdata_CLASSNSSCOPENamespacedGadgetENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSNSSCOPENamespacedGadgetENDCLASS,
    nullptr,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSNSSCOPENamespacedGadgetENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<NamespacedGadget, std::true_type>
    >,
    nullptr
} };

namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSNSSCOPEMyObjectENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSNSSCOPEMyObjectENDCLASS = QtMocHelpers::stringData(
    "NS::MyObject",
    "mysig",
    "",
    "NS::MyType",
    "mysig2",
    "MyType&",
    "mysig3",
    "mysig4",
    "mysig5",
    "A",
    "mysig6",
    "mysig7",
    "const A*",
    "mysig8",
    "A*",
    "myslot1",
    "myslot2",
    "MyType",
    "myslot3",
    "myslot4",
    "myslot5",
    "myslot6",
    "myslot7",
    "myslot8",
    "myinvokable1",
    "myinvokable2",
    "myinvokable3",
    "myinvokable4",
    "myinvokable5",
    "myinvokable6",
    "myinvokable7",
    "myinvokable8",
    "myinvokable9",
    "MyType*",
    "foo",
    "foo1",
    "enumFoo",
    "EnumFoo",
    "namespacedGadget",
    "NamespacedGadget",
    "namespacedGadget2",
    "NS::NamespacedGadget",
    "nonNamespacedGadget",
    "NonNamespacedGadget"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSNSSCOPEMyObjectENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      25,   14, // methods
       6,  239, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       8,       // signalCount

 // signals: name, argc, parameters, tag, flags, initial metatype offsets
       1,    1,  164,    2, 0x06,    7 /* Public */,
       4,    1,  167,    2, 0x06,    9 /* Public */,
       6,    1,  170,    2, 0x06,   11 /* Public */,
       7,    1,  173,    2, 0x06,   13 /* Public */,
       8,    1,  176,    2, 0x06,   15 /* Public */,
      10,    1,  179,    2, 0x06,   17 /* Public */,
      11,    1,  182,    2, 0x06,   19 /* Public */,
      13,    1,  185,    2, 0x06,   21 /* Public */,

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
      15,    1,  188,    2, 0x0a,   23 /* Public */,
      16,    1,  191,    2, 0x0a,   25 /* Public */,
      18,    1,  194,    2, 0x0a,   27 /* Public */,
      19,    1,  197,    2, 0x0a,   29 /* Public */,
      20,    1,  200,    2, 0x0a,   31 /* Public */,
      21,    1,  203,    2, 0x0a,   33 /* Public */,
      22,    1,  206,    2, 0x0a,   35 /* Public */,
      23,    1,  209,    2, 0x0a,   37 /* Public */,

 // methods: name, argc, parameters, tag, flags, initial metatype offsets
      24,    1,  212,    2, 0x02,   39 /* Public */,
      25,    1,  215,    2, 0x02,   41 /* Public */,
      26,    1,  218,    2, 0x02,   43 /* Public */,
      27,    1,  221,    2, 0x02,   45 /* Public */,
      28,    1,  224,    2, 0x02,   47 /* Public */,
      29,    1,  227,    2, 0x02,   49 /* Public */,
      30,    1,  230,    2, 0x02,   51 /* Public */,
      31,    1,  233,    2, 0x02,   53 /* Public */,
      32,    1,  236,    2, 0x02,   55 /* Public */,

 // signals: parameters
    QMetaType::Void, 0x80000000 | 3,    2,
    QMetaType::Void, 0x80000000 | 5,    2,
    QMetaType::Void, 0x80000000 | 3,    2,
    QMetaType::Void, 0x80000000 | 3,    2,
    QMetaType::Void, 0x80000000 | 9,    2,
    QMetaType::Void, 0x80000000 | 9,    2,
    QMetaType::Void, 0x80000000 | 12,    2,
    QMetaType::Void, 0x80000000 | 14,    2,

 // slots: parameters
    QMetaType::Void, 0x80000000 | 3,    2,
    QMetaType::Void, 0x80000000 | 17,    2,
    QMetaType::Void, 0x80000000 | 3,    2,
    QMetaType::Void, 0x80000000 | 3,    2,
    QMetaType::Void, 0x80000000 | 9,    2,
    QMetaType::Void, 0x80000000 | 9,    2,
    QMetaType::Void, 0x80000000 | 12,    2,
    QMetaType::Void, 0x80000000 | 14,    2,

 // methods: parameters
    QMetaType::Void, 0x80000000 | 3,    2,
    QMetaType::Void, 0x80000000 | 17,    2,
    QMetaType::Void, 0x80000000 | 3,    2,
    QMetaType::Void, 0x80000000 | 3,    2,
    QMetaType::Void, 0x80000000 | 9,    2,
    QMetaType::Void, 0x80000000 | 9,    2,
    QMetaType::Void, 0x80000000 | 12,    2,
    QMetaType::Void, 0x80000000 | 14,    2,
    0x80000000 | 33, 0x80000000 | 3,    2,

 // properties: name, type, flags
      34, 0x80000000 | 3, 0x00015009, uint(-1), 0,
      35, 0x80000000 | 17, 0x00015009, uint(-1), 0,
      36, 0x80000000 | 37, 0x00015409, uint(-1), 0,
      38, 0x80000000 | 39, 0x00015409, uint(-1), 0,
      40, 0x80000000 | 41, 0x00015409, uint(-1), 0,
      42, 0x80000000 | 43, 0x00015409, uint(-1), 0,

       0        // eod
};

Q_CONSTINIT const QMetaObject NS::MyObject::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSNSSCOPEMyObjectENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSNSSCOPEMyObjectENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSNSSCOPEMyObjectENDCLASS_t,
        // property 'foo'
        QtPrivate::TypeAndForceComplete<NS::MyType, std::true_type>,
        // property 'foo1'
        QtPrivate::TypeAndForceComplete<MyType, std::true_type>,
        // property 'enumFoo'
        QtPrivate::TypeAndForceComplete<EnumFoo, std::true_type>,
        // property 'namespacedGadget'
        QtPrivate::TypeAndForceComplete<NamespacedGadget, std::true_type>,
        // property 'namespacedGadget2'
        QtPrivate::TypeAndForceComplete<NS::NamespacedGadget, std::true_type>,
        // property 'nonNamespacedGadget'
        QtPrivate::TypeAndForceComplete<NonNamespacedGadget, std::true_type>,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<MyObject, std::true_type>,
        // method 'mysig'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<NS::MyType, std::false_type>,
        // method 'mysig2'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<MyType &, std::false_type>,
        // method 'mysig3'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<NS::MyType, std::false_type>,
        // method 'mysig4'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const NS::MyType &, std::false_type>,
        // method 'mysig5'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<A, std::false_type>,
        // method 'mysig6'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const A, std::false_type>,
        // method 'mysig7'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const A *, std::false_type>,
        // method 'mysig8'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<A *, std::false_type>,
        // method 'myslot1'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<NS::MyType, std::false_type>,
        // method 'myslot2'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<MyType, std::false_type>,
        // method 'myslot3'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<NS::MyType, std::false_type>,
        // method 'myslot4'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const NS::MyType &, std::false_type>,
        // method 'myslot5'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<A, std::false_type>,
        // method 'myslot6'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const A, std::false_type>,
        // method 'myslot7'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const A *, std::false_type>,
        // method 'myslot8'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<A *, std::false_type>,
        // method 'myinvokable1'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<NS::MyType, std::false_type>,
        // method 'myinvokable2'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<MyType, std::false_type>,
        // method 'myinvokable3'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<NS::MyType, std::false_type>,
        // method 'myinvokable4'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const NS::MyType &, std::false_type>,
        // method 'myinvokable5'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<A, std::false_type>,
        // method 'myinvokable6'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const A, std::false_type>,
        // method 'myinvokable7'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const A *, std::false_type>,
        // method 'myinvokable8'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<A *, std::false_type>,
        // method 'myinvokable9'
        QtPrivate::TypeAndForceComplete<MyType *, std::false_type>,
        QtPrivate::TypeAndForceComplete<NS::MyType, std::false_type>
    >,
    nullptr
} };

void NS::MyObject::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<MyObject *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->mysig((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1]))); break;
        case 1: _t->mysig2((*reinterpret_cast< std::add_pointer_t<MyType&>>(_a[1]))); break;
        case 2: _t->mysig3((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1]))); break;
        case 3: _t->mysig4((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1]))); break;
        case 4: _t->mysig5((*reinterpret_cast< std::add_pointer_t<A>>(_a[1]))); break;
        case 5: _t->mysig6((*reinterpret_cast< std::add_pointer_t<A>>(_a[1]))); break;
        case 6: _t->mysig7((*reinterpret_cast< std::add_pointer_t<const A*>>(_a[1]))); break;
        case 7: _t->mysig8((*reinterpret_cast< std::add_pointer_t<A*>>(_a[1]))); break;
        case 8: _t->myslot1((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1]))); break;
        case 9: _t->myslot2((*reinterpret_cast< std::add_pointer_t<MyType>>(_a[1]))); break;
        case 10: _t->myslot3((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1]))); break;
        case 11: _t->myslot4((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1]))); break;
        case 12: _t->myslot5((*reinterpret_cast< std::add_pointer_t<A>>(_a[1]))); break;
        case 13: _t->myslot6((*reinterpret_cast< std::add_pointer_t<A>>(_a[1]))); break;
        case 14: _t->myslot7((*reinterpret_cast< std::add_pointer_t<const A*>>(_a[1]))); break;
        case 15: _t->myslot8((*reinterpret_cast< std::add_pointer_t<A*>>(_a[1]))); break;
        case 16: _t->myinvokable1((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1]))); break;
        case 17: _t->myinvokable2((*reinterpret_cast< std::add_pointer_t<MyType>>(_a[1]))); break;
        case 18: _t->myinvokable3((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1]))); break;
        case 19: _t->myinvokable4((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1]))); break;
        case 20: _t->myinvokable5((*reinterpret_cast< std::add_pointer_t<A>>(_a[1]))); break;
        case 21: _t->myinvokable6((*reinterpret_cast< std::add_pointer_t<A>>(_a[1]))); break;
        case 22: _t->myinvokable7((*reinterpret_cast< std::add_pointer_t<const A*>>(_a[1]))); break;
        case 23: _t->myinvokable8((*reinterpret_cast< std::add_pointer_t<A*>>(_a[1]))); break;
        case 24: { MyType* _r = _t->myinvokable9((*reinterpret_cast< std::add_pointer_t<NS::MyType>>(_a[1])));
            if (_a[0]) *reinterpret_cast< MyType**>(_a[0]) = std::move(_r); }  break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (MyObject::*)(NS::MyType );
            if (_t _q_method = &MyObject::mysig; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (MyObject::*)(MyType & );
            if (_t _q_method = &MyObject::mysig2; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (MyObject::*)(NS::MyType );
            if (_t _q_method = &MyObject::mysig3; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (MyObject::*)(const NS::MyType & );
            if (_t _q_method = &MyObject::mysig4; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (MyObject::*)(A );
            if (_t _q_method = &MyObject::mysig5; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (MyObject::*)(const A );
            if (_t _q_method = &MyObject::mysig6; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (MyObject::*)(const A * );
            if (_t _q_method = &MyObject::mysig7; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (MyObject::*)(A * );
            if (_t _q_method = &MyObject::mysig8; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 7;
                return;
            }
        }
    } else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<MyObject *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< NS::MyType*>(_v) = _t->foo(); break;
        case 1: *reinterpret_cast< MyType*>(_v) = _t->foo(); break;
        case 2: *reinterpret_cast< EnumFoo*>(_v) = _t->enumFoo(); break;
        case 3: *reinterpret_cast< NamespacedGadget*>(_v) = _t->namespacedGadget(); break;
        case 4: *reinterpret_cast< NS::NamespacedGadget*>(_v) = _t->namespacedGadget2(); break;
        case 5: *reinterpret_cast< NonNamespacedGadget*>(_v) = _t->nonNamespacedGadget(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    } else if (_c == QMetaObject::BindableProperty) {
    }
}

const QMetaObject *NS::MyObject::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *NS::MyObject::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSNSSCOPEMyObjectENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int NS::MyObject::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 25)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 25;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 25)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 25;
    }else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::BindableProperty
            || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 6;
    }
    return _id;
}

// SIGNAL 0
void NS::MyObject::mysig(NS::MyType _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 0, _a);
}

// SIGNAL 1
void NS::MyObject::mysig2(MyType & _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 1, _a);
}

// SIGNAL 2
void NS::MyObject::mysig3(NS::MyType _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 2, _a);
}

// SIGNAL 3
void NS::MyObject::mysig4(const NS::MyType & _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 3, _a);
}

// SIGNAL 4
void NS::MyObject::mysig5(A _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 4, _a);
}

// SIGNAL 5
void NS::MyObject::mysig6(const A _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 5, _a);
}

// SIGNAL 6
void NS::MyObject::mysig7(const A * _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 6, _a);
}

// SIGNAL 7
void NS::MyObject::mysig8(A * _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 7, _a);
}
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSMyObj2ENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSMyObj2ENDCLASS = QtMocHelpers::stringData(
    "MyObj2",
    "mySig",
    "",
    "AnnonFoo",
    "unqualPairParam",
    "std::pair<bool,QualMe>",
    "unqualPairClass",
    "pair<bool,QualMe>",
    "fullyQUalPair",
    "std::pair<bool,MyObj2::QualMe>",
    "typeAlias",
    "MyList",
    "genericWithoutFullyQual",
    "QList<QualMe>",
    "genericFullyQual",
    "QList<MyObj2::QualMe>",
    "qstringListTypealias",
    "fullTypeAlias",
    "MyObj2::MyList",
    "unqualGenericDbusReply",
    "QDBusPendingReply<QualMe>",
    "boolDbusReply",
    "QDBusPendingReply<bool>",
    "voidDbusReply",
    "QDBusPendingReply<>",
    "typedefInGeneric",
    "QDBusPendingReply<MyList>",
    "nestedGeneric",
    "QDBusPendingReply<std::shared_ptr<MyObj2>>",
    "nestedNotFullyQualifiedGeneric",
    "QDBusPendingReply<std::shared_ptr<MyList>>"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSMyObj2ENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      15,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       1,       // signalCount

 // signals: name, argc, parameters, tag, flags, initial metatype offsets
       1,    1,  104,    2, 0x06,    1 /* Public */,

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       4,    0,  107,    2, 0x0a,    3 /* Public */,
       6,    0,  108,    2, 0x0a,    4 /* Public */,
       8,    0,  109,    2, 0x0a,    5 /* Public */,
      10,    0,  110,    2, 0x0a,    6 /* Public */,
      12,    0,  111,    2, 0x0a,    7 /* Public */,
      14,    0,  112,    2, 0x0a,    8 /* Public */,
      16,    0,  113,    2, 0x0a,    9 /* Public */,
      17,    0,  114,    2, 0x0a,   10 /* Public */,
      19,    0,  115,    2, 0x0a,   11 /* Public */,
      21,    0,  116,    2, 0x0a,   12 /* Public */,
      23,    0,  117,    2, 0x0a,   13 /* Public */,
      25,    0,  118,    2, 0x0a,   14 /* Public */,
      27,    1,  119,    2, 0x0a,   15 /* Public */,
      29,    1,  122,    2, 0x0a,   17 /* Public */,

 // signals: parameters
    QMetaType::Void, 0x80000000 | 3,    2,

 // slots: parameters
    0x80000000 | 5,
    0x80000000 | 7,
    0x80000000 | 9,
    0x80000000 | 11,
    0x80000000 | 13,
    0x80000000 | 15,
    QMetaType::QStringList,
    0x80000000 | 18,
    0x80000000 | 20,
    0x80000000 | 22,
    0x80000000 | 24,
    0x80000000 | 26,
    QMetaType::Void, 0x80000000 | 28,    2,
    QMetaType::Void, 0x80000000 | 30,    2,

       0        // eod
};

Q_CONSTINIT const QMetaObject MyObj2::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSMyObj2ENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSMyObj2ENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSMyObj2ENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<MyObj2, std::true_type>,
        // method 'mySig'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<AnnonFoo, std::false_type>,
        // method 'unqualPairParam'
        QtPrivate::TypeAndForceComplete<std::pair<bool,QualMe>, std::false_type>,
        // method 'unqualPairClass'
        QtPrivate::TypeAndForceComplete<pair<bool,QualMe>, std::false_type>,
        // method 'fullyQUalPair'
        QtPrivate::TypeAndForceComplete<std::pair<bool,MyObj2::QualMe>, std::false_type>,
        // method 'typeAlias'
        QtPrivate::TypeAndForceComplete<MyList, std::false_type>,
        // method 'genericWithoutFullyQual'
        QtPrivate::TypeAndForceComplete<QList<QualMe>, std::false_type>,
        // method 'genericFullyQual'
        QtPrivate::TypeAndForceComplete<QList<MyObj2::QualMe>, std::false_type>,
        // method 'qstringListTypealias'
        QtPrivate::TypeAndForceComplete<QStringList, std::false_type>,
        // method 'fullTypeAlias'
        QtPrivate::TypeAndForceComplete<MyObj2::MyList, std::false_type>,
        // method 'unqualGenericDbusReply'
        QtPrivate::TypeAndForceComplete<QDBusPendingReply<QualMe>, std::false_type>,
        // method 'boolDbusReply'
        QtPrivate::TypeAndForceComplete<QDBusPendingReply<bool>, std::false_type>,
        // method 'voidDbusReply'
        QtPrivate::TypeAndForceComplete<QDBusPendingReply<>, std::false_type>,
        // method 'typedefInGeneric'
        QtPrivate::TypeAndForceComplete<QDBusPendingReply<MyList>, std::false_type>,
        // method 'nestedGeneric'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<QDBusPendingReply<std::shared_ptr<MyObj2>>, std::false_type>,
        // method 'nestedNotFullyQualifiedGeneric'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<QDBusPendingReply<std::shared_ptr<MyList>>, std::false_type>
    >,
    nullptr
} };

void MyObj2::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<MyObj2 *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->mySig((*reinterpret_cast< std::add_pointer_t<AnnonFoo>>(_a[1]))); break;
        case 1: { std::pair<bool,QualMe> _r = _t->unqualPairParam();
            if (_a[0]) *reinterpret_cast< std::pair<bool,QualMe>*>(_a[0]) = std::move(_r); }  break;
        case 2: { pair<bool,QualMe> _r = _t->unqualPairClass();
            if (_a[0]) *reinterpret_cast< pair<bool,QualMe>*>(_a[0]) = std::move(_r); }  break;
        case 3: { std::pair<bool,MyObj2::QualMe> _r = _t->fullyQUalPair();
            if (_a[0]) *reinterpret_cast< std::pair<bool,MyObj2::QualMe>*>(_a[0]) = std::move(_r); }  break;
        case 4: { MyList _r = _t->typeAlias();
            if (_a[0]) *reinterpret_cast< MyList*>(_a[0]) = std::move(_r); }  break;
        case 5: { QList<QualMe> _r = _t->genericWithoutFullyQual();
            if (_a[0]) *reinterpret_cast< QList<QualMe>*>(_a[0]) = std::move(_r); }  break;
        case 6: { QList<MyObj2::QualMe> _r = _t->genericFullyQual();
            if (_a[0]) *reinterpret_cast< QList<MyObj2::QualMe>*>(_a[0]) = std::move(_r); }  break;
        case 7: { QStringList _r = _t->qstringListTypealias();
            if (_a[0]) *reinterpret_cast< QStringList*>(_a[0]) = std::move(_r); }  break;
        case 8: { MyObj2::MyList _r = _t->fullTypeAlias();
            if (_a[0]) *reinterpret_cast< MyObj2::MyList*>(_a[0]) = std::move(_r); }  break;
        case 9: { QDBusPendingReply<QualMe> _r = _t->unqualGenericDbusReply();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QualMe>*>(_a[0]) = std::move(_r); }  break;
        case 10: { QDBusPendingReply<bool> _r = _t->boolDbusReply();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 11: { QDBusPendingReply<> _r = _t->voidDbusReply();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 12: { QDBusPendingReply<MyList> _r = _t->typedefInGeneric();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<MyList>*>(_a[0]) = std::move(_r); }  break;
        case 13: _t->nestedGeneric((*reinterpret_cast< std::add_pointer_t<QDBusPendingReply<std::shared_ptr<MyObj2>>>>(_a[1]))); break;
        case 14: _t->nestedNotFullyQualifiedGeneric((*reinterpret_cast< std::add_pointer_t<QDBusPendingReply<std::shared_ptr<MyList>>>>(_a[1]))); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (MyObj2::*)(AnnonFoo );
            if (_t _q_method = &MyObj2::mySig; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 0;
                return;
            }
        }
    }
}

const QMetaObject *MyObj2::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MyObj2::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSMyObj2ENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int MyObj2::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 15)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 15;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 15)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 15;
    }
    return _id;
}

// SIGNAL 0
void MyObj2::mySig(AnnonFoo _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 0, _a);
}
QT_WARNING_POP
